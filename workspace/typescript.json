{
	// Place your snippets for typescript here. Each snippet is defined under a snippet name and has a prefix, body and 
	// description. The prefix is what is used to trigger the snippet and the body will be expanded and inserted. Possible variables are:
	// $1, $2 for tab stops, $0 for the final cursor position, and ${1:label}, ${2:another} for placeholders. Placeholders with the 
	// same ids are connected.
	// Example:
	// "Print to console": {
	// 	"prefix": "log",
	// 	"body": [
	// 		"console.log('$1');",
	// 		"$2"
	// 	],
	// 	"description": "Log output to console"
	// }
	"Arrow function": {
		"prefix": "flee",
		"body": [
			"const $1 = ($2) => {",
			"       $3",
			"}"
		],
		"description": "Arrow function"
	},
	"Switch case": {
		"prefix": "switchcase",
		"body": [
			"switch ($1) {",
			"    case $2:",
			"        break;",
			"",
			"    default:",
			"        break;",
			"}",
		],
		"description": "Switch case"
	},
	"React Context Index file": {
		"prefix": "react-context-index",
		"body": [
			"",
			"",
			"",
			"export * from './${1:Name}Context';",
			"export * from './${1:Name}Provider';",
			"export * from './${2:name}Reducer';",
		],
		"description": "React Context Index file"
	},
	"React custom reducer": {
		"prefix": "reactcontext-reducer",
		"body": [
			"import { ${1:Name}State } from './';",
			"",
			"type ${1:Name}ActionType =",
			"    | { type: '[${1:Name}] - ${2:ActionName}' }",
			"",
			"",
			"export const $3${1:Name}Reducer = (state: ${1:Name}State, action: ${1:Name}ActionType): ${1:Name}State => {",
			"",
			"    switch (action.type) {",
			"        case '[${1:Name}] - ${2:ActionName}':",
			"            return {",
			"                ...state,",
			"            }",
			"",
			"        default:",
			"            return state;",
			"    }",
			"",
			"",
			"}"
		],
		"description": "React custom context reducer"
	},
}
